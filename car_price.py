# -*- coding: utf-8 -*-
"""car_price.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/108U5KJy-B9QSrSS-DLC7loOWNo78efF1
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Converting car_price_test_data file into DataFrame

df=pd.read_csv('/content/car_price_train-data.csv')
df

df.shape

df.head()

df.tail()

df.isna().sum()

df.dtypes

"""Data Visualizations Of Catergorical Datas"""

sns.countplot(y=df['Location'],data=df,color='red')

sns.countplot(x=df['Fuel_Type'],data=df,color='blue')

sns.countplot(x=df['Transmission'],data=df,color='orange')

sns.countplot(x=df['Owner_Type'],data=df,color='yellow')

# Splitting datas in the column 'Name' and assigning to a new column named 'Brand'

df['Brand']=df['Name'].apply(lambda x:x.split() [0])
df

df['Brand'].value_counts()

df.dtypes

# Converting Categorical Datas into integers using get dummies

df1=pd.get_dummies(df[['Location','Fuel_Type','Transmission','Owner_Type','Brand']],dtype=int,drop_first=True)
df1

# joining 2 data frame

dfe=pd.concat([df,df1],axis=1)
dfe

dfe.columns

dfe.drop(['Unnamed: 0','Name','Location','Fuel_Type','Transmission','Owner_Type','New_Price','Brand'],axis=1,inplace=True)
dfe

dfe.dtypes

# Replacing units of values of columns in 'Mileage','Engine','Power'

dfe['Mileage']=dfe['Mileage'].str.replace('km/kg','')
dfe['Mileage']=dfe['Mileage'].str.replace('kmpl','')
dfe['Engine']=dfe['Engine'].str.replace('CC','')
dfe['Power']=dfe['Power'].str.replace('bhp','')
dfe

dfe.dtypes

# Converting null values into 0

dfe['Mileage']=dfe['Mileage'].str.replace('null','0')
dfe['Power']=dfe['Power'].str.replace('null','0')
dfe['Engine']=dfe['Engine'].str.replace('null','0')
dfe

dfe.dtypes

# Data Type Conversion

dfe['Mileage']=dfe['Mileage'].astype(float)
dfe['Engine']=dfe['Engine'].astype(float)
dfe['Power']=dfe['Power'].astype(float)
dfe.dtypes

dfe.isna().sum()

# Converting 0's into missing value column

dfe.loc[dfe.Engine==0,'Engine']=np.NaN
dfe.loc[dfe.Mileage==0,'Mileage']=np.NaN
dfe.loc[dfe.Power==0,'Power']=np.NaN
dfe

dfe.isna().sum()

"""Filling Missing Values"""

dfe['Mileage'].fillna(dfe['Mileage'].mean(),inplace=True)

dfe.isna().sum()

dfe['Engine'].fillna(dfe['Engine'].mean(),inplace=True)

dfe['Power'].fillna(dfe['Power'].mean(),inplace=True)

dfe['Seats'].fillna(dfe['Seats'].mode()[0],inplace=True)

dfe.isna().sum()

dfe

# splitting dataframe for model creation

y_train=dfe.iloc[:,6]
y_train

x_train=dfe.drop(['Price'],axis=1)
x_train

# converting car_price_test-data into dataframe

df2=pd.read_csv('/content/car_price_test-data.csv')
df2

df2.head()

df2.shape

df2.tail()

df2.isna().sum()

df2.dtypes

"""Data Visualizations"""

x11=df2['Location'].unique()
x11

y11=df2['Location'].value_counts()
y11

plt.bar(x11,y11,color='r')
plt.xlabel('Location')
plt.ylabel('Count')
plt.title('Location - Count Graph')
plt.xticks(rotation=90)

x22=df2['Fuel_Type'].unique()
x22

y22=df2['Fuel_Type'].value_counts()
y22

plt.bar(x22,y22,color='g')
plt.xticks(rotation=90)
plt.xlabel('Fuel_Type')
plt.ylabel('Count')
plt.title('Fuel_Type - Count Graph')

x33=df2['Transmission'].unique()
x33

y33=df2['Transmission'].value_counts()
y33

plt.pie(y33,labels=x33,autopct='%1.1f%%')
plt.legend(loc='upper right')

x44=df2['Owner_Type'].unique()
x44

y44=df2['Owner_Type'].value_counts()
y44

plt.bar(x44,y44,color='c')
plt.xticks(rotation=90)
plt.xlabel('Owner_Type')
plt.ylabel('Count')
plt.title('Owner_Type - Count Graph')

df2

df2['Brand']=df2['Name'].apply(lambda x:x.split() [0])
df2.columns

df2.dtypes

df2.isna().sum()

# Encoding

df21=pd.get_dummies(df2[['Location','Fuel_Type','Transmission','Owner_Type','Brand']],dtype=int,drop_first=True)
df21

df21.isna().sum()

dfe1=pd.concat([df2,df21],axis=1)
dfe1

dfe1.columns

dfe1.drop(['Unnamed: 0', 'Name', 'Location','Fuel_Type','Transmission','Owner_Type','Brand','New_Price'],axis=1,inplace=True)

dfe1.isna().sum()

dfe1.columns

dfe1.dtypes

dfe1['Mileage'].unique()

dfe1['Mileage']=dfe1['Mileage'].str.replace('km/kg','')
dfe1['Mileage']=dfe1['Mileage'].str.replace('kmpl','')

dfe1

dfe1['Engine']=dfe1['Engine'].str.replace('CC','')
dfe1['Power']=dfe1['Power'].str.replace('bhp','')

dfe1

dfe1['Mileage']=dfe1['Mileage'].str.replace('null','0')
dfe1['Engine']=dfe1['Engine'].str.replace('null','0')
dfe1['Power']=dfe1['Power'].str.replace('null','0')

dfe1['Mileage']=dfe1['Mileage'].astype(float)
dfe1['Engine']=dfe1['Engine'].astype(float)
dfe1['Power']=dfe1['Power'].astype(float)

dfe1.dtypes

dfe1.isna().sum()

dfe1.loc[dfe1.Mileage==0,'Mileage']=np.NaN
dfe1.loc[dfe1.Engine==0,'Engine']=np.NaN
dfe1.loc[dfe1.Power==0,'Power']=np.NaN

dfe1.isna().sum()

dfe1['Mileage'].fillna(dfe1['Mileage'].mean(),inplace=True)

dfe1.isna().sum()

dfe1['Engine'].fillna(dfe1['Engine'].mean(),inplace=True)

dfe1['Power'].fillna(dfe1['Power'].mean(),inplace=True)

dfe1['Seats'].fillna(dfe1['Seats'].mode()[0],inplace=True)

dfe1.isna().sum()

dfe1.dtypes

x_train.columns

x_train.drop(['Brand_Audi','Brand_Force','Brand_Lamborghini','Brand_Smart','Fuel_Type_Electric'],axis=1,inplace=True)

dfe1.columns

dfe1.drop(['Brand_Hindustan','Brand_OpelCorsa'],axis=1,inplace=True)

# Model Creation

from sklearn.linear_model import LinearRegression
model=LinearRegression()
model.fit(x_train,y_train)
y_pred=model.predict(dfe1)
y_pred